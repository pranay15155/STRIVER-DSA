https://leetcode.com/problems/max-consecutive-ones-iii/description/

class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        int n=nums.size();
        int low=0,high=0,ans=0;
        int count_zero=0;
        while(low<=high && high<n){
            if(nums[high]==0){
                count_zero++;
            }
            while(count_zero>k && low<=high){
                if(nums[low]==0){
                    count_zero--;
                }
                low++;
            }
            ans=max(ans,high-low+1);
            high++;
        }
        return ans;
    }
};

Time Complexity ->O(2*N)


//OPTIMISED VERSION 

class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        int n = nums.size();
        int low = 0, high = 0, ans = 0;
        int count_zero = 0;
        while (low <= high && high < n) {
            if (nums[high] == 0) {
                count_zero++;
            }
            if (count_zero > k) {
                if (nums[low] == 0) {
                    count_zero--;
                }
                low++;
            } 
            if (count_zero <= k) {
                ans = max(ans, high - low + 1);
            }
            high++;
        }
        return ans;
    }
};

Time Complexity ->O(N)
