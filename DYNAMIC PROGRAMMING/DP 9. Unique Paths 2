https://leetcode.com/problems/unique-paths-ii/description/

class Solution {
public:
int n,m;
int dp[105][105];
    int f(int row,int col,vector<vector<int>>& grid){
        if(row==n-1 && col==m-1)return 1;
        if(row>=n || col>=m )return 0;
        if(grid[row][col]==1)return 0;
        if(dp[row][col]!=-1)return dp[row][col];
        return dp[row][col]=f(row+1,col,grid)+f(row,col+1,grid);
    }
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        n=grid.size(),m=grid[0].size();
        if(grid[0][0]==1 || grid[n-1][m-1]==1)return 0;
        memset(dp,-1,sizeof(dp));
        return f(0,0,grid);
    }
};


//MEMOIZATION ****************************************************************************************************

class Solution {
public:
  int f(int row,int col,vector<vector<int>>&dp,vector<vector<int>>& grid){
        int m=grid.size(),n=grid[0].size();
        if(row>=m || col>=n || grid[row][col]==1)return 0;
        if(row==m-1 && col==n-1)return 1;
        if(dp[row][col]!=-1)return dp[row][col];
        return dp[row][col]=f(row+1,col,dp,grid)+f(row,col+1,dp,grid);
    }
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int m=grid.size(),n=grid[0].size();
        vector<vector<int>>dp(m,vector<int>(n,-1));
        return f(0,0,dp,grid);
    }
};

//TABULATION  METHOD 1 ******************************************************************************************


class Solution {
public:

    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int m=grid.size(),n=grid[0].size();
        vector<vector<long long int>>dp(m,vector<long long int>(n,0));
        if(grid[m-1][n-1]==0)dp[m-1][n-1]=1;
        //the values in elements in last row and last column are decided first
        for(int row=m-2;row>=0;row--){
            if(dp[row+1][n-1]==1 && grid[row][n-1]==0)dp[row][n-1]=1;
        }
        for(int col=n-2;col>=0;col--){
           if(dp[m-1][col+1]==1 && grid[m-1][col]==0)dp[m-1][col]=1;
        }
        for(int row=0;row<m;row++){
            for(int col=0;col<n;col++){
                if(grid[row][col]==1)dp[row][col]=0;
            }
        }
        for(int row=m-2;row>=0;row--){
            for(int col=n-2;col>=0;col--){
            if(grid[row][col]==0){
                dp[row][col]=dp[row+1][col]+dp[row][col+1];
                }
            }
        }
        return dp[0][0];

    }
};

//TABULATION  METHOD 2 ******************************************************************************************



class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int n=grid.size(),m=grid[0].size();
        vector<vector<long long>>dp(n,vector<long long>(m,0));
        for(int row=n-1;row>=0;row--){
            for(int col=m-1;col>=0;col--){
                if(grid[row][col]==1){
                    dp[row][col]=0;
                    continue;
                }
                if(row==n-1 && col==m-1 && grid[row][col]==0 ){dp[row][col]=1;continue;}
                if(row==n-1)dp[row][col]=dp[row][col+1];
                else if(col==m-1)dp[row][col]=dp[row+1][col];
                else dp[row][col]=dp[row+1][col]+dp[row][col+1];
            }
        }
        return dp[0][0];
    }
};

//SPACE OPTIMIZATION ******************************************************************************************


class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int n=grid.size(),m=grid[0].size();
        vector<long long>prev(m,0);
        for(int row=n-1;row>=0;row--){
            vector<long long>curr(m,0);
            for(int col=m-1;col>=0;col--){
                if(grid[row][col]==1){
                    curr[col]=0;
                    continue;
                }
                if(row==n-1 && col==m-1 && grid[row][col]==0 ){curr[col]=1;continue;}
                if(row==n-1)curr[col]=curr[col+1];
                else if(col==m-1)curr[col]=prev[col];
                else curr[col]=prev[col]+curr[col+1];
            }prev=curr;
        }
        return prev[0];
    }
};
