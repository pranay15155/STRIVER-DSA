https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/


class Solution {
public:
    int n;
int dp[1005][2][105];
    int f(int ind,int buy,int limit,vector<int>& prices,int k){
        if(ind>=n || limit>=k)return 0;  //whenever we reach n or k transactional limit we return 0
        if(dp[ind][buy][limit]!=-1)return dp[ind][buy][limit];
        int ans=0;
        if(buy){ //here i am buying stocks
           ans=-prices[ind]+f(ind+1,0,limit,prices,k); //here i am buying stock at current index
           ans=max(ans,f(ind+1,1,limit,prices,k)); //here i will buy stock at future index
        }
        else{
            ans=prices[ind]+f(ind+1,1,limit+1,prices,k); //here i am selling stock at current index and while selling i increase limit because a transaction is completed 
            ans=max(ans,f(ind+1,0,limit,prices,k));//here i will sell stock at future index
        }
        return dp[ind][buy][limit]=ans;
    }
    int maxProfit(int k, vector<int>& prices) {
        n=prices.size();
        memset(dp,-1,sizeof(dp));
        return f(0,1,0,prices,k);
    }
};












//MEMOISATION 

class Solution {
public:
int n;
    int f(int ind,int buy ,int limit,vector<int>& prices,vector<vector<vector<int>>>&dp,int k){
        if(ind>=n || limit>=k)return 0;
        if(dp[ind][buy][limit]!=-1)return dp[ind][buy][limit];
        if(buy)return dp[ind][buy][limit]=max(-prices[ind]+f(ind+1,0,limit,prices,dp,k),f(ind+1,1,limit,prices,dp,k));
        return dp[ind][buy][limit]=max(prices[ind]+f(ind+1,1,limit+1,prices,dp,k),f(ind+1,0,limit,prices,dp,k));
    }
    int maxProfit(int k, vector<int>& prices) {
    n=prices.size();
    vector<vector<vector<int>>> dp(n, vector<vector<int>>(2, vector<int>(k+2, -1)));
    return f(0,1,0,prices,dp,k);
    }
};

//TABULATION 

class Solution {
public:
int n;

    int maxProfit(int k, vector<int>& prices) {
    n=prices.size();
    vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(2, vector<int>(k+2, 0)));
    for(int ind=n-1;ind>=0;ind--){
        for(int buy=0;buy<2;buy++){
            for(int limit=0;limit<k;limit++){
                if(buy)dp[ind][buy][limit]=max(-prices[ind]+dp[ind+1][0][limit],dp[ind+1][1][limit]);
                else dp[ind][buy][limit]=max(prices[ind]+dp[ind+1][1][limit+1],dp[ind+1][0][limit]);
            }
        }
    }
    return dp[0][1][0];
    }
};


//SPACE OPTIMIZATION 

class Solution {
public:
    int n;
    int maxProfit(int k, vector<int>& prices) {
    n=prices.size();
    vector<vector<int>>prev(2, vector<int>(k+2, 0));
    for(int ind=n-1;ind>=0;ind--){
        vector<vector<int>>curr(2, vector<int>(k+2, 0));
        for(int buy=0;buy<2;buy++){
            for(int limit=0;limit<k;limit++){
                if(buy)curr[buy][limit]=max(-prices[ind]+prev[0][limit],prev[1][limit]);
                else curr[buy][limit]=max(prices[ind]+prev[1][limit+1],prev[0][limit]);
            }
        }prev=curr;
    }
    return prev[1][0];
    }
};
