https://leetcode.com/problems/minimum-path-sum/


class Solution {
public:
    int n,m;
    int dp[205][205];
    int f(int row,int col,vector<vector<int>>& grid){
        if(row==n-1 && col==m-1)return grid[row][col];
        if(row>=n || col>=m)return 1e8;
        if(dp[row][col]!=-1)return dp[row][col];
        int down=f(row+1,col,grid);
        int right=f(row,col+1,grid);
        return dp[row][col]=grid[row][col]+min(down,right);
    }
    int minPathSum(vector<vector<int>>& grid) {
        n=grid.size();
        m=grid[0].size();
        memset(dp,-1,sizeof(dp));
        return f(0,0,grid);
    }
};


//MEMOIZATION ****************************************************************************************************************

class Solution {
public:
    int n,m;
    int f(int row,int col,vector<vector<int>>& grid,vector<vector<int>>& dp){
        if(row>=n || col>=m)return 1e8;
        if(row==n-1 && col==m-1)return grid[n-1][m-1];
        if(dp[row][col]!=-1)return dp[row][col];
        int right=f(row,col+1,grid,dp);
        int down=f(row+1,col,grid,dp);
        return dp[row][col]=grid[row][col]+min(right,down);
    }
    int minPathSum(vector<vector<int>>& grid) {
        n=grid.size();
        m=grid[0].size();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return f(0,0,grid,dp);
    }
};

//TABULATION  ****************************************************************************************************************

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
       int n=grid.size();
       int m=grid[0].size();
       vector<vector<int>>dp(n,vector<int>(m,-1));
       for(int row=n-1;row>=0;row--){
        for(int col=m-1;col>=0;col--){
            if(row==n-1 && col==m-1){
                dp[row][col]=grid[row][col];
                continue;
            }
            int down=(row+1<=n-1)?dp[row+1][col]:(1e8);
            int right=(col+1<=m-1)?dp[row][col+1]:(1e8);
            dp[row][col]=grid[row][col]+min(down,right);
        }
       }
       return dp[0][0];
    }
};

//SPACE OPTIMIZATION *********************************************************************************************************

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
       int n=grid.size();
       int m=grid[0].size();
       vector<int>prev(m,-1);
       for(int row=n-1;row>=0;row--){
        vector<int>curr(m,-1);
        for(int col=m-1;col>=0;col--){
            if(row==n-1 && col==m-1){
                curr[col]=grid[row][col];
                continue;
            }
            int down=(row+1<=n-1)?prev[col]:(1e8);
            int right=(col+1<=m-1)?curr[col+1]:(1e8);
            curr[col]=grid[row][col]+min(down,right);
        }
        prev=curr;
       }
       return prev[0];
    }
};
