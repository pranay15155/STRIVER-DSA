https://www.geeksforgeeks.org/problems/0-1-knapsack-problem0945/1


class Solution {
  public:
    
    int f(int ind,int curr_weight,vector<int> &weight,vector<int> &value,int n, vector<vector<int>>&dp){
    if(ind>=n || curr_weight<=0 )return 0;
    if(dp[ind][curr_weight]!=-1)return dp[ind][curr_weight];
    int take=0;
    if(curr_weight>=weight[ind])take=value[ind]+f(ind+1,curr_weight-weight[ind],weight,value,n,dp);
    int not_take=f(ind+1,curr_weight,weight,value,n,dp);
    return dp[ind][curr_weight]=max(take,not_take);
    }

    int knapSack(int capacity, vector<int> &val, vector<int> &wt) {
        int n=val.size();
        vector<vector<int>>dp(n,vector<int>(capacity+1,-1));
        return f(0,capacity,wt,val,n,dp);
    }
};

//why if(curr_weight>=weight[ind])take=value[ind]+f(ind+1,curr_weight-weight[ind],weight,value,n,dp);
//because see below example if we take weight with less capacity it is wrong and when weight 
//goes negative we return 0 but we are already adding its value which is wrong 

// 3 ->capacity
// 1 2 3 ->value
// 4 5 6 ->weight


//MEMOIZATION ****************************************************************

class Solution
{
    public:
    int f(int ind,int weight,int wt[],int val[],int n, vector<vector<int>>&dp){
        if(ind==n-1){
            if(weight>=wt[ind])return val[ind];
            return 0;
        }
        if(dp[ind][weight]!=-1)return dp[ind][weight];
        int take=(weight>=wt[ind])?val[ind]+f(ind+1,weight-wt[ind],wt,val,n,dp):0;
        int not_take=f(ind+1,weight,wt,val,n,dp);
        return dp[ind][weight]=max(take,not_take);
    }
    int knapSack(int W, int wt[], int val[], int n) 
    { 
      vector<vector<int>>dp(n,vector<int>(W+1,-1));
      return f(0,W,wt,val,n,dp);
    }
};

//TABULATION **************************************************************************

class Solution
{
    public:
    int knapSack(int W, int wt[], int val[], int n) 
    { 
      vector<vector<int>>dp(n,vector<int>(W+1,0));
       for (int i = wt[n-1]; i <= W; i++) {
        dp[n-1][i] = val[n-1];
       }
      for(int ind=n-2;ind>=0;ind--){
          for(int weight=0;weight<=W;weight++){
            int take=(weight>=wt[ind])?val[ind]+dp[ind+1][weight-wt[ind]]:0;
            int not_take=dp[ind+1][weight];
            dp[ind][weight]=max(take,not_take);
          }
      }
      return dp[0][W];
    }
};

//SPACE OPTIMIZATION ***********************************************************************

class Solution
{
    public:
    int knapSack(int W, int wt[], int val[], int n) 
    { 
    vector<int>prev(W+1,0);
       for (int i = wt[n-1]; i <= W; i++) {
        prev[i] = val[n-1];
       }
      for(int ind=n-2;ind>=0;ind--){
          vector<int>curr(W+1,0);
          for(int weight=0;weight<=W;weight++){
            int take=(weight>=wt[ind])?val[ind]+prev[weight-wt[ind]]:0;
            int not_take=prev[weight];
            curr[weight]=max(take,not_take);
          }
          prev=curr;
      }
      return prev[W];
    }
};

