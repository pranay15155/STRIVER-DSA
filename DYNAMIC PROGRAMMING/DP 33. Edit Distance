https://leetcode.com/problems/edit-distance/description/


//MEMOISATION ////////////

class Solution {
public:
    int n,m;
    int f(int ind1,int ind2,string &word1, string &word2,vector<vector<int>>&dp){
        if(ind1>=n)return m-ind2;
        if(ind2>=m)return n-ind1;
        if(dp[ind1][ind2]!=-1)return dp[ind1][ind2];
        if(word1[ind1]==word2[ind2])return dp[ind1][ind2]=f(ind1+1,ind2+1,word1,word2,dp);
        int insert=1+f(ind1,ind2+1,word1,word2,dp);
        int delet=1+f(ind1+1,ind2,word1,word2,dp);
        int replace=1+f(ind1+1,ind2+1,word1,word2,dp);
        return dp[ind1][ind2]=min({insert,delet,replace});
    }
    int minDistance(string word1, string word2) {
        n=word1.size(),m=word2.size();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return f(0,0,word1,word2,dp);
    }
};

//TABULATION /////////////////////////

class Solution {
public:
    int n,m;
    int minDistance(string word1, string word2) {
        n=word1.size(),m=word2.size();
        vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
        for(int ind1=n;ind1>=0;ind1--){
            for(int ind2=m;ind2>=0;ind2--){
                if(ind1==n){
                    dp[ind1][ind2]=m-ind2;
                    continue;
                }
                if(ind2==m){
                    dp[ind1][ind2]=n-ind1;
                    continue;
                }
                if(word1[ind1]==word2[ind2]){
                    dp[ind1][ind2]=dp[ind1+1][ind2+1];
                    continue;
                }
                dp[ind1][ind2]=min({1+dp[ind1][ind2+1],1+dp[ind1+1][ind2],1+dp[ind1+1][ind2+1]});
                
            }
        }
        return dp[0][0];
    }
};

///SPACE OPTIMIZATION ///////////////////

class Solution {
public:
    int n,m;
    int minDistance(string word1, string word2) {
        n=word1.size(),m=word2.size();
        vector<int>prev(m+1,0);
        for(int ind1=n;ind1>=0;ind1--){
            vector<int>curr(m+1,0);
            for(int ind2=m;ind2>=0;ind2--){
                if(ind1==n){
                    curr[ind2]=m-ind2;
                    continue;
                }
                if(ind2==m){
                    curr[ind2]=n-ind1;
                    continue;
                }
                if(word1[ind1]==word2[ind2]){
                    curr[ind2]=prev[ind2+1];
                    continue;
                }
                curr[ind2]=min({1+curr[ind2+1],1+prev[ind2],1+prev[ind2+1]});
            }prev=curr;
        }
        return prev[0];
    }
};
