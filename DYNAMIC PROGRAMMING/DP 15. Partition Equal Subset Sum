https://leetcode.com/problems/partition-equal-subset-sum/description/


class Solution {
public:
    int n;
    int f(int ind, int sum, vector<int>& arr,vector<vector<int>>&dp) {
        if (sum == 0)return 1;
        if (sum < 0 || ind >= n)return 0;
        if (dp[ind][sum] != -1)return dp[ind][sum];
        int take = f(ind + 1, sum - arr[ind], arr,dp);
        int not_take = f(ind + 1, sum, arr,dp);
        return dp[ind][sum] = take || not_take;
    }
    
    bool canPartition(vector<int>& nums) {
        n=nums.size();
        int sum=0;
        for(int i=0;i<nums.size();i++){
            sum+=nums[i];
        }
        if(sum&1)return 0;
        vector<vector<int>>dp(n,vector<int>(sum+1,-1));
        return f(0,sum/2,nums,dp);

    }
};

//MEMOIZATION *********************************************************************************

class Solution {
public:
 bool f(int ind,int target,vector<vector<int>>&dp,vector<int>&arr){
        if(target<0 || ind>=arr.size())return 0;
        if(target==arr[ind])return dp[ind][arr[ind]]=1;
        if(dp[ind][target]!=-1)return dp[ind][target];
        bool take=f(ind+1,target-arr[ind],dp,arr);
        bool not_take=f(ind+1,target,dp,arr);
        return dp[ind][ target]=take||not_take;
    }
    bool canPartition(vector<int>& nums) {
        int sum=accumulate(nums.begin(),nums.end(),0);
        if(sum&1)return false;
        int target=sum/2;
        vector<vector<int>>dp(nums.size(),vector<int>(target+1,-1));
        return f(0,target,dp,nums);
    }
};


//TABULATION   ****************************************************************************


class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        if (sum & 1)
            return false;
        int target = sum / 2;
        vector<vector<int>> dp(n, vector<int>(target + 1, 0));
        for (int ind = n - 1; ind >= 0; --ind) {
            dp[ind][0] = true;
            for (int tar = 1; tar <= target; ++tar) {
                if (ind == n - 1) {
                    if (nums[n - 1] <= target) {
                        dp[n - 1][nums[n - 1]] = true;
                    }
                    continue;
                }
                int take =(tar >= nums[ind]) ? dp[ind + 1][tar - nums[ind]] : false;
                int not_take = dp[ind + 1][tar];
                dp[ind][tar] = take || not_take;
            }
        }
        return dp[0][target];
    }
};

//SPACE OPTIMIZATION **************************************************************************

class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        if (sum & 1)return false;
        int target = sum / 2;
        vector<int>prev(target + 1, 0);
        for (int ind = n - 1; ind >= 0; --ind) {
            vector<int>curr(target + 1, 0);
            curr[0] = true;
            for (int tar = 1; tar <= target; ++tar) {
                if (ind == n - 1) {
                    if (nums[n - 1] <= target) {
                        curr[nums[n - 1]] = true;
                    }
                    continue;
                }
                int take =(tar >= nums[ind]) ? prev[tar - nums[ind]] : false;
                int not_take = prev[tar];
                curr[tar] = take || not_take;
            }
            prev=curr;
        }
        return prev[target];
    }
};
