//Note : A strictly increasing or a strictly decreasing sequence should not be considered as a bitonic sequence-->gfg version 



class Solution {
  public:
   
    int LongestBitonicSequence(int n, vector<int> &nums) {
        vector<int>left(n,1),right(n,1);
        for(int i=0;i<n;i++){
            for(int j=0;j<i;j++){
                if(nums[j]<nums[i])left[i]=max(left[i],1+left[j]);
            }
        }
        reverse(nums.begin(),nums.end());
        for(int i=0;i<n;i++){
            for(int j=0;j<i;j++){
                if(nums[j]<nums[i])right[i]=max(right[i],1+right[j]);
            }
        }
        reverse(right.begin(),right.end());
        for(int i=0;i<n;i++){
            if(left[i]>1 && right[i]>1)left[i]+=right[i]-1;
            else left[i]=0;
        }
        return*max_element(left.begin(),left.end());
    }
};
