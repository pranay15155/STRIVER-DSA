https://leetcode.com/problems/target-sum/


class Solution {
public:
    int n;
    int f(int ind, int sum, vector<int>& arr, vector<vector<int>>& dp) {
        if (sum == 0 && ind == n)
            return 1;
        if (sum < 0 || ind >= n)
            return 0;
        if (dp[ind][sum] != -1)
            return dp[ind][sum];
        int take = f(ind + 1, sum - arr[ind], arr, dp);
        int not_take = f(ind + 1, sum, arr, dp);
        return dp[ind][sum] = take + not_take;
    }
    int findTargetSumWays(vector<int>& nums, int target) {
        n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        sum += target;
        if (sum<0 || sum & 1)return 0;
        sum /= 2;
        vector<vector<int>> dp(n, vector<int>(sum + 1, -1));
        return f(0, sum, nums, dp);
    }
};

// nums1+nums2=sum
// nums1-nums2=target
// nums1=(sum+target)/2;

//nums->[100] target=-200 this is an important testcase 

//this question is basically same as count subset with sum k 






//MEMOIZATION *********************************************************************

class Solution {
public:
    int n;
    int f(int ind,int target,vector<int>&arr,vector<vector<int>>&dp){
	    if(ind==n-1){
	        if(target==0 && arr[ind]==0)return 2;
	        if(target==0 ||arr[ind]==target)return 1;
	        return 0;
	    }
	    if(ind>=n)return 0;
	    if(dp[ind][target]!=-1)return dp[ind][target];
	    int not_take=f(ind+1,target,arr,dp);
	    int take=(target>=arr[ind])?f(ind+1,target-arr[ind],arr,dp):0;
	    return dp[ind][target]=(take+not_take);
	}
    int findTargetSumWays(vector<int>& nums, int target) {
        n=nums.size();
        int total=accumulate(nums.begin(),nums.end(),0);
        target=total+target;
        if(target&1 || target<0)return 0;
        target/=2;
        vector<vector<int>>dp(n,vector<int>(target+1,-1));
        return f(0,target,nums,dp);
    }
};

//TABULATION *********************************************************************

class Solution {
public:
    int n;
    int findTargetSumWays(vector<int>& nums, int target) {
        n=nums.size();
        int total=accumulate(nums.begin(),nums.end(),0);
        target=total+target;
        if(target&1 || target<0)return 0;
        target/=2;
        vector<vector<int>>dp(n,vector<int>(target+1,0));
        dp[n-1][0]=1;
        if(nums[n-1]<=target)dp[n-1][nums[n-1]]=1;
        if(nums[n-1]==0)dp[n-1][0]=2;
        
        for(int ind=n-2;ind>=0;ind--){
            for(int tar=0;tar<=target;tar++){
                int not_take=dp[ind+1][tar];
                int take=(tar>=nums[ind])?dp[ind+1][tar-nums[ind]]:0;
                dp[ind][tar]=(take+not_take);
            }
        }
        return dp[0][target];
    }
};

//SPACE OPTIMIZATION ***************************************************************

class Solution {
public:
    int n;
    int findTargetSumWays(vector<int>& nums, int target) {
        n=nums.size();
        int total=accumulate(nums.begin(),nums.end(),0);
        target=total+target;
        if(target&1 || target<0)return 0;
        target/=2;
        vector<int>prev(target+1,0);
        prev[0]=1;
        if(nums[n-1]<=target)prev[nums[n-1]]=1;
        if(nums[n-1]==0)prev[0]=2;
        
        for(int ind=n-2;ind>=0;ind--){
            vector<int>curr(target+1,0);
            for(int tar=0;tar<=target;tar++){
                int not_take=prev[tar];
                int take=(tar>=nums[ind])?prev[tar-nums[ind]]:0;
                curr[tar]=(take+not_take);
            }
            prev=curr;
        }
        return prev[target];
    }
};
