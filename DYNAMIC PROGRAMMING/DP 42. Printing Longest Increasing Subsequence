class Solution {
  public:
    vector<int> longestIncreasingSubsequence(int n, vector<int>& nums) {
        vector<int>dp(n,1);
        vector<int>hash(n,0);
        int maxi=0,last_index=0;
        for(int i=0;i<n;i++){
            hash[i]=i;
            for(int j=0;j<i;j++){
                if(nums[j]<nums[i] && dp[i]<1+dp[j]){
                    dp[i]=1+dp[j];
                    hash[i]=j;
                }
            }
            if(maxi<dp[i]){
                maxi=dp[i];
                last_index=i;
            }
        }
        vector<int>seq;
        while(last_index!=hash[last_index]){
           seq.push_back(nums[last_index]);
           last_index=hash[last_index];
        }
        seq.push_back(nums[last_index]);
        reverse(seq.begin(),seq.end());
        return seq;
    }
};
