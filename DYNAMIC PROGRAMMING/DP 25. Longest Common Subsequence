https://leetcode.com/problems/longest-common-subsequence/





class Solution {
public:
    int n,m;
    int f(int ind1,int ind2,string &text1,string &text2,vector<vector<int>>&dp){
       if(ind1==n-1 && ind2==m-1 && text1[ind1]==text2[ind2])return 1;
       if(ind1>=n || ind2>=m)return 0;
       if(dp[ind1][ind2]!=-1)return dp[ind1][ind2];
       if(text1[ind1]==text2[ind2]){
        return dp[ind1][ind2]=1+f(ind1+1,ind2+1,text1,text2,dp);
       }
       return dp[ind1][ind2]=max(f(ind1+1,ind2,text1,text2,dp),f(ind1,ind2+1,text1,text2,dp));
    }

    int longestCommonSubsequence(string text1, string text2) {
         n=text1.size();
         m=text2.size();
         vector<vector<int>>dp(n,vector<int>(m,-1));
         return f(0,0,text1,text2,dp);
    }
};









//MEMOIZATION *************************************************************


class Solution {
public:
    int n,m;
    int f(int ind1,int ind2,string &text1, string &text2,vector<vector<int>>&dp){
        if(ind1==n-1 && ind2==m-1)return (text1[ind1]==text2[ind2])?1:0;
        if(ind1>=n || ind2>=m)return 0;
        if(dp[ind1][ind2]!=-1)return dp[ind1][ind2];
        int ans=0;
        if(text1[ind1]==text2[ind2])ans=1+f(ind1+1,ind2+1,text1,text2,dp);
        if(text1[ind1]!=text2[ind2]){
            ans=max(f(ind1,ind2+1,text1,text2,dp),f(ind1+1,ind2,text1,text2,dp));
        }
        return dp[ind1][ind2]=ans;
    }
    int longestCommonSubsequence(string text1, string text2) {
        n=text1.size();
        m=text2.size();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return f(0,0,text1,text2,dp);
    }
};



//TABULATION *******************************************************************

class Solution {
public:
    int n,m;
    int longestCommonSubsequence(string text1, string text2) {
        n=text1.size();
        m=text2.size();
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        dp[n-1][m-1]=(text1[n-1]==text2[m-1])?1:0;
        for(int ind1=n-1;ind1>=0;ind1--){
            for(int ind2=m-1;ind2>=0;ind2--){
              int ans=0;
              if(ind1==n-1 && ind2==m-1)continue;
              if(text1[ind1]==text2[ind2])ans=1+dp[ind1+1][ind2+1];
              if(text1[ind1]!=text2[ind2]){
                if(ind1<n-1)ans=max(ans,dp[ind1+1][ind2]);
                if(ind2<m-1)ans=max(ans,dp[ind1][ind2+1]);
              }
            dp[ind1][ind2]=ans;
            }
        }
        return dp[0][0];
    }
};

//METHOD--2

class Solution {
public:
    
    int longestCommonSubsequence(string text1, string text2) {
        int n=text1.size(),m=text2.size();
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        for(int ind1=n-1;ind1>=0;ind1--){
            for(int ind2=m-1;ind2>=0;ind2--){
                if(ind1==n-1 && ind2==m-1){
                    dp[ind1][ind2]=text1[ind1]==text2[ind2]?1:0;
                    continue;
                }
                if(text1[ind1]==text2[ind2]){
                    dp[ind1][ind2]=dp[ind1+1][ind2+1]+1;
                    continue;
                }
                dp[ind1][ind2]=max(dp[ind1+1][ind2],dp[ind1][ind2+1]);         
            }
        }
        return dp[0][0];
    }
};

//SPACE OPTIMIZATION *************************************************************



class Solution {
public:
    int n,m;
    int longestCommonSubsequence(string text1, string text2) {
        n=text1.size();
        m=text2.size();
        vector<int>prev(m+1,0);
        prev[m-1]=(text1[n-1]==text2[m-1])?1:0;
        for(int ind1=n-1;ind1>=0;ind1--){
             vector<int>curr=prev;
            for(int ind2=m-1;ind2>=0;ind2--){
              int ans=0;
              if(ind1==n-1 && ind2==m-1)continue;
              if(text1[ind1]==text2[ind2])ans=1+prev[ind2+1];
              if(text1[ind1]!=text2[ind2]){
                if(ind1<n-1)ans=max(ans,prev[ind2]);
                if(ind2<m-1)ans=max(ans,curr[ind2+1]);
              }
            curr[ind2]=ans;
            }
            prev=curr;
        }
        return prev[0];
    }
};


//METHOD---2

class Solution {
public:
    
    int longestCommonSubsequence(string text1, string text2) {
        int n=text1.size(),m=text2.size();
        vector<int>prev(m+1,0);
        for(int ind1=n-1;ind1>=0;ind1--){
            vector<int>curr(m+1,0);
            for(int ind2=m-1;ind2>=0;ind2--){
                if(ind1==n-1 && ind2==m-1){
                    curr[ind2]=text1[ind1]==text2[ind2]?1:0;
                    continue;
                }
                if(text1[ind1]==text2[ind2]){
                    curr[ind2]=prev[ind2+1]+1;
                    continue;
                }
                curr[ind2]=max(prev[ind2],curr[ind2+1]);         
            }
            prev=curr;
        }
        return prev[0];
    }
};

