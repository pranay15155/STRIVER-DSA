https://leetcode.com/problems/coin-change-ii/description/


class Solution {
public:
int n;
    int f(int ind,int amount,vector<int>& coins,vector<vector<int>>&dp){
        if(ind>=n || amount<0)return 0;
        if(amount==0)return 1;
        if(dp[ind][amount]!=-1)return dp[ind][amount];
        int take=f(ind,amount-coins[ind],coins,dp);
        int not_take=f(ind+1,amount,coins,dp);
        return dp[ind][amount]=take+not_take;
    }
    
    int change(int amount, vector<int>& coins) {
        n=coins.size();
        vector<vector<int>>dp(n,vector<int>(amount+1,-1));
        return f(0,amount,coins,dp);
    }
};





//MEMOISATION *********************************************************************************

class Solution {
public:
    int n;
int f(int ind ,int amount,vector<int>& coins,vector<vector<int>>&dp){
        if(ind==n-1){return (amount%coins[ind]==0)?1:0;}
        if(dp[ind][amount]!=-1)return dp[ind][amount];
        int take=(amount>=coins[ind])?f(ind,amount-coins[ind],coins,dp):0;
        int not_take=f(ind+1,amount,coins,dp);
        return dp[ind][amount]=take+not_take;
    }

    int change(int amount, vector<int>& coins) {
         n=coins.size();
         vector<vector<int>>dp(n,vector<int>(amount+1,-1));
         return f(0,amount,coins,dp);

    }
};

//TABULATION ************************************************************************

class Solution {
public:
    int n;
    int change(int amount, vector<int>& coins) {
        n = coins.size();
        vector<vector<long long int>> dp(n,vector<long long int>(amount + 1, 0));

        for (int amt = 0; amt <= amount; amt++) {
            if (amt % coins[n - 1] == 0) {
                dp[n - 1][amt] = 1;
            }
        }
        for (int ind = n - 2; ind >= 0; ind--) {
            for (int amt = 0; amt <= amount; amt++) {
                long long int take =
                    (amt >= coins[ind]) ? dp[ind][amt - coins[ind]] : 0;
                long long int not_take = dp[ind + 1][amt];
                dp[ind][amt] = take + not_take;
            }
        }
        return dp[0][amount];
    }
};

//METHOD--2

class Solution {
public:
    int change(int amount, vector<int>& coins) {
        int n=coins.size();
        vector<vector<int>>dp(n,vector<int>(amount+1,0));
        for(int ind=n-1;ind>=0;ind--){
            for(int target=0;target<=amount;target++){
                if(ind==n-1){
                    if(target%coins[ind]==0)dp[ind][target]=1;
                    continue;
                }
                int take=(target>=coins[ind])?dp[ind][target-coins[ind]]:0;
                int not_take=dp[ind+1][target];
                dp[ind][target]=take+not_take;
            }
        }
        return dp[0][amount];
    }
};

//SPACE OPTIMIZATION **********************************************************************

class Solution {
public:
    int n;
    int change(int amount, vector<int>& coins) {
        n = coins.size();
        vector<long long int>prev(amount + 1, 0);

        for (int amt = 0; amt <= amount; amt++) {
            if (amt % coins[n - 1] == 0) {
                prev[amt] = 1;
            }
        }
        for (int ind = n - 2; ind >= 0; ind--) {
            vector<long long int>curr(amount + 1, 0);
            for (int amt = 0; amt <= amount; amt++) {
                long long int take =(amt >= coins[ind]) ? curr[amt - coins[ind]] : 0;
                long long int not_take = prev[amt];
                curr[amt] = take + not_take;
            }
            prev=curr;
        }
        return prev[amount];
    }
};
