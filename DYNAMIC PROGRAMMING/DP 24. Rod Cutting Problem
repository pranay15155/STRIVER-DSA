https://www.geeksforgeeks.org/problems/rod-cutting0840/1


class Solution {
  public:
    int n;
    int f(int ind,int length,vector<int> &price,vector<vector<int>>&dp){
        if(ind>=n || length<=0)return 0;
        if(dp[ind][length]!=-1)return dp[ind][length];
        int take=(length>=ind+1)?f(ind,length-(ind+1),price,dp)+price[ind]:0;
        int not_take=f(ind+1,length,price,dp);
        return dp[ind][length]=max(take,not_take);
    }
    int cutRod(vector<int> &price) {
        n=price.size();
        vector<vector<int>>dp(n,vector<int>(n+1,-1));
        return f(0,n,price,dp);
    }
};

// int take=(length>=ind+1)?f(ind,length-(ind+1),price,dp)+price[ind]:0;
// why f(ind) and not f(ind+1) we can know  from this testcase


// Input: price[] = [3, 5, 8, 9, 10, 17, 17, 20]
// Output: 24
// Explanation: The maximum obtainable value is 24 by cutting the rod into 8
// pieces of length 1, i.e, 8*price[1]= 8*3 = 24.







//MEMOIZATION *****************************************************************
class Solution{
  public:
    int f(int ind,int length,int price[],vector<vector<int>>&dp,int n){
        if(ind==n-1){
            if(length>=ind+1)return price[ind];
            return 0;
        }
        if(dp[ind][length]!=-1)return dp[ind][length];
        int take=(length>=ind+1)?price[ind]+f(ind,length-(ind+1),price,dp,n):0;
        int not_take=f(ind+1,length,price,dp,n);
        return dp[ind][length]=max(take,not_take);
    }
    int cutRod(int price[], int n) {
         vector<vector<int>>dp(n,vector<int>(n+1,-1));
         return f(0,n,price,dp,n);
    }
};

//TABULATION*******************************************************************

class Solution{
  public:
    int cutRod(int price[], int n) {
         vector<vector<int>>dp(n,vector<int>(n+1,0));
         dp[n-1][n]=price[n-1];
         for(int ind=n-2;ind>=0;ind--){
             for(int length=1;length<=n;length++){
                 int take=(length>=ind+1)?price[ind]+dp[ind][length-(ind+1)]:0;
                 int not_take=dp[ind+1][length];
                 dp[ind][length]=max(take,not_take);
             }
         }
         return dp[0][n];
    }
};

//METHOD--2

class Solution{
  public:
    
    int cutRod(int price[], int n) {
        vector<vector<int>>dp(n,vector<int>(n+1,-1));
        for(int ind=n-1;ind>=0;ind--){
            for(int length=0;length<=n;length++){
                if(ind==n-1){
                    if(length>=ind+1)dp[ind][length]=price[ind];
                    continue;
                }
                int take=length>=ind+1?dp[ind][length-ind-1]+price[ind]:0;
                int not_take=dp[ind+1][length];
                dp[ind][length]=max(take,not_take);
            }
        }
        return dp[0][n];
    }
};

//SPACE OPTIMIZATION ***********************************************************

class Solution{
  public:
    int cutRod(int price[], int n) {
         vector<int>prev(n+1,0);
         prev[n]=price[n-1];
         for(int ind=n-2;ind>=0;ind--){
             vector<int>curr(n+1,0);
             for(int length=1;length<=n;length++){
                 int take=(length>=ind+1)?price[ind]+curr[length-(ind+1)]:0;
                 int not_take=prev[length];
                 curr[length]=max(take,not_take);
             }
             prev=curr;
         }
         return prev[n];
    }
};
