https://www.geeksforgeeks.org/problems/perfect-sum-problem5633/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=perfect-sum-problem

class Solution {
  public:
     int f(int ind,int sum,vector<int>& arr,vector<vector<int>>&dp,int n){
        if(sum==0 && ind==n)return 1; 
        if(sum<0 ||ind>=n)return 0; //written explanation below
        if(dp[ind][sum]!=-1)return dp[ind][sum];
        int take=f(ind+1,sum-arr[ind],arr,dp,n);
        int not_take=f(ind+1,sum,arr,dp,n);
        return dp[ind][sum]=take+not_take;
    }
    int perfectSum(vector<int>& arr, int target) {
         int n=arr.size();
        vector<vector<int>>dp(n+5,vector<int>(target+1,-1));
        return f(0,target,arr,dp,n);
    }
};
//at base case if(sum==0 && ind==n)return 1;
// why ind==n and not ind==n-1 because at ind==n-1 there are two possibility
//that arr[n-1]=0 && sum==0 
//or sum==arr[n-1] 
//these both are covered in this base case when we reach n from all the ways possible
//and if we reach n and we donot have sum==0 then we return 0 
//which is in this line -> if(sum<0 ||ind>=n)return 0;


//MEMOIZATION ***************************************************************************

class Solution{

	public:
	int MOD=1e9+7;
	int f(int ind,int target,int arr[],vector<vector<int>>&dp,int n){
	    if(ind==n-1){
	        if(target==0 && arr[ind]==0)return 2;
	        if(target==0 ||arr[ind]==target)return 1;
	        return 0;
	    }
	    if(ind>=n)return 0;
	    if(dp[ind][target]!=-1)return dp[ind][target];
	    int not_take=f(ind+1,target,arr,dp,n)%MOD;
	    int take=(target>=arr[ind])?f(ind+1,target-arr[ind],arr,dp,n)%MOD:0;
	    return dp[ind][target]=(take+not_take)%MOD;
	}
	int perfectSum(int arr[], int n, int sum)
	{
        // Your code goes here
        vector<vector<int>>dp(n,vector<int>(sum+1,-1));
        return f(0,sum,arr,dp,n)%MOD;
	}
	  
};

//TABULATION ******************************************************************************************

class Solution{

	public:
	int MOD=1e9+7;
	int perfectSum(int arr[], int n, int sum)
	{
        vector<vector<int>>dp(n,vector<int>(sum+1,0));
        dp[n-1][0]=1;
        if(arr[n-1]<=sum)dp[n-1][arr[n-1]]=1;
        if(arr[n-1]==0)dp[n-1][0]=2;
        
        for(int ind=n-2;ind>=0;ind--){
            for(int tar=0;tar<=sum;tar++){
                int not_take=dp[ind+1][tar]%MOD;
                int take=(tar>=arr[ind])?dp[ind+1][tar-arr[ind]]%MOD:0;
                dp[ind][tar]=(take+not_take)%MOD;
            }
        }
        return dp[0][sum];
	}
	  
};

//SPACE OPTIMIZATION *****************************************************************************

class Solution{

	public:
	int MOD=1e9+7;
	int perfectSum(int arr[], int n, int sum)
	{
        vector<int>prev(sum+1,0);
        prev[0]=1;
        if(arr[n-1]<=sum)prev[arr[n-1]]=1;
        if(arr[n-1]==0)prev[0]=2;
        
        for(int ind=n-2;ind>=0;ind--){
            vector<int>curr(sum+1,0);
            for(int tar=0;tar<=sum;tar++){
                int not_take=prev[tar]%MOD;
                int take=(tar>=arr[ind])?prev[tar-arr[ind]]%MOD:0;
                curr[tar]=(take+not_take)%MOD;
            }
            prev=curr;
        }
        return prev[sum];
	}
	  
};
