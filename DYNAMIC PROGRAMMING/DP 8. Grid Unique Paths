https://leetcode.com/problems/unique-paths/description/

class Solution {
public:
    int r,c;
    int dp[105][105];
    int f(int row,int col){
     if(row==r-1 && col==c-1)return 1;
     if(row>=r || col>=c)return 0;
     if(dp[row][col]!=-1)return dp[row][col];
     int down=f(row+1,col);
     int right=f(row,col+1);
     return dp[row][col]=down+right;
    }
    int uniquePaths(int m, int n) {
        r=m;
        c=n;
        memset(dp,-1,sizeof(dp));
        return f(0,0);

    }
};
//m-row
//n-col

//MEMOIZATION **************************************************************************************


class Solution {
public:
    int f(int row,int col,vector<vector<int>>&dp,int m,int n){
        if(row>=m || col>=n )return 0;
        if(row==m-1 && col==n-1)return 1;
        if(dp[row][col]!=-1)return dp[row][col];
        return dp[row][col]=f(row+1,col,dp,m,n)+f(row,col+1,dp,m,n);
    }
    int uniquePaths(int m, int n) {
        vector<vector<int>>dp(m,vector<int>(n,-1));
        return f(0,0,dp,m,n);
        
    }
};

//TABULATION *****************************************************************************************

void d(vector<int>&v){for(auto &t:v){cout<<t<<" ";}cout<<endl;}
void d(vector<vector<int>>&v){for(auto &a:v){for(auto &b:a){cout<<b<<" ";}cout<<endl;}}
void d(int arr[],int size){for(int i=0;i<size;i++){cout<<arr[i]<<" ";}cout<<endl;}
void d(vector<vector<vector<int>>>&v){for(auto &a:v){for(auto &b:a){for(auto &c:b){cout<<c<<" ";}cout<<endl;}cout<<endl;}cout<<endl;}

class Solution {
public:
   
    int uniquePaths(int m, int n) {
        vector<vector<int>>dp(m,vector<int>(n,1));
        if(m==1 || n==1)return 1;
        for(int row=m-2;row>=0;row--){
            for(int col=n-2;col>=0;col--){
                dp[row][col]=dp[row+1][col]+dp[row][col+1];
            }
        }
        return dp[0][0];

        
    }
};

///SPACE OPTIMIZATION ********************************************************************************

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<int> previous(n, 1);
        if (m == 1 || n == 1)
            return 1;
        for (int row = m - 2; row >= 0; row--) {
            vector<int> current(n, 1);
            for (int col = n - 2; col >= 0; col--) {
                current[col] = previous[col] + current[col + 1];
            }
            previous=current;
        }
        return previous[0];
    }
};
