https://leetcode.com/problems/unique-paths/description/

//MEMOISATION 

class Solution {
public:
    int f(int row,int col,vector<vector<int>>&dp,int m,int n){
        if(row==m-1 && col==n-1)return 1;
        if(row<0 || col<0 || row>=m || col>=n)return 0;
        if(dp[row][col]!=-1)return dp[row][col];
        return dp[row][col]=f(row+1,col,dp,m,n)+f(row,col+1,dp,m,n);
    }
    int uniquePaths(int m, int n) {
        vector<vector<int>>dp(m,vector<int>(n,-1));
        return f(0,0,dp,m,n);
    }
};

//TABULATION *****************************************************************************************

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>>dp(m,vector<int>(n,0));
        for(int row=0;row<m;row++){
            dp[row][n-1]=1;
        }
        for(int col=0;col<n;col++){
            dp[m-1][col]=1;
        }
        for(int row=m-2;row>=0;row--){
            for(int col=n-2;col>=0;col--){
                dp[row][col]=dp[row+1][col]+dp[row][col+1];
            }
        }
        return dp[0][0];
    }
};

///SPACE OPTIMIZATION ********************************************************************************

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<int>prev(n,1);
        vector<int>curr(n,1);//edge case [m=1 ,n=2]
        for(int row=m-2;row>=0;row--){
            for(int col=n-2;col>=0;col--){
                curr[col]=prev[col]+curr[col+1];
            }
            prev=curr;
        }
        return curr[0];//prev[0] can also be returned no problem 
    }
};
