https://www.geeksforgeeks.org/problems/geeks-training/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=geeks-training

/////////////////////MEMOISATION

class Solution {
  public:
    int f(int ind,int prev,vector<vector<int>>& arr,vector<vector<int>>& dp){
        if(ind==0){
            if(prev==0)return max(arr[0][1],arr[0][2]);
            else if(prev==1)return max(arr[0][0],arr[0][2]);
            else return max(arr[0][0],arr[0][1]);
        }
        if(dp[ind][prev]!=-1)return dp[ind][prev];
        int ans=0;
        for(int curr=0;curr<3;curr++){
            if(curr!=prev){
                ans=max(ans,f(ind-1,curr,arr,dp)+arr[ind][curr]);
            }
        }
        return dp[ind][prev]=ans;
    }
    int maximumPoints(vector<vector<int>>& arr) {
        int n=arr.size();
        vector<vector<int>>dp(n,vector<int>(4,-1));
        return f(n-1,3,arr,dp);
    }
};

///////////////////////////TABULATION


class Solution {
  public:
    int maximumPoints(vector<vector<int>>& arr) {
        int n=arr.size();
        vector<vector<int>>dp(n,vector<int>(3,0));
        dp[0][0]=arr[0][0];
        dp[0][1]=arr[0][1];
        dp[0][2]=arr[0][2];
        
        for(int ind=1;ind<n;ind++){
            for(int curr=0;curr<3;curr++){
                int ans=0;
               for(int prev=0;prev<3;prev++){
                   if(prev!=curr){
                       ans=max(ans,dp[ind-1][prev]+arr[ind][curr]);
                   }
               }
               dp[ind][curr]=ans;
            }
        }
        return max({dp[n-1][0],dp[n-1][1],dp[n-1][2]});
        
    }
};
