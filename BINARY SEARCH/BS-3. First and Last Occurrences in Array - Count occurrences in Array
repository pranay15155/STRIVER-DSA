class Solution {
public:
    int first_pos(vector<int>& nums, int target){
        int low=0,high=nums.size()-1;
        int ans=-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target){
                ans=mid;
                high=mid-1;
            }
            else if(nums[mid]>target)high=mid-1;
            else low=mid+1;
        }
        return ans;
    }
    int last_pos(vector<int>& nums, int target){
        int low=0,high=nums.size()-1;
        int ans=-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target){
                ans=mid;
                low=mid+1;
            }
            else if(nums[mid]>target)high=mid-1;
            else low=mid+1;
        }
        return ans;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        return {first_pos(nums,target),last_pos(nums,target)};
    }
};


//COUNT OCCURENCE IN AN ARRAY 

class Solution{
public:	
	/* if x is present in arr[] then returns the count
		of occurrences of x, otherwise returns 0. */
		int first_pos(int nums[], int target,int n){
        int low=0,high=n-1;
        int ans=-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target){
                ans=mid;
                high=mid-1;
            }
            else if(nums[mid]>target)high=mid-1;
            else low=mid+1;
        }
        return ans;
    }
    int last_pos(int nums[], int target,int n){
        int low=0,high=n-1;
        int ans=-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target){
                ans=mid;
                low=mid+1;
            }
            else if(nums[mid]>target)high=mid-1;
            else low=mid+1;
        }
        return ans;
    }
	int count(int arr[], int n, int x) {
	    int fo=first_pos(arr,x,n);
	    int lo=last_pos(arr,x,n);
	    if(fo==-1)return 0;
	    else return lo-fo+1;
	}
};
