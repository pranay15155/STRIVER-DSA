https://leetcode.com/problems/number-of-provinces/description/


class Solution {
public:
    int find_parent(int node, vector<int>& parent) {
        if (node == parent[node])
            return node;
        return parent[node] = find_parent(parent[node], parent);
    }
    void union_by_size(int u, int v, vector<int>& parent, vector<int>& size) {
        int pu = find_parent(u, parent);
        int pv = find_parent(v, parent);
        if (pu != pv) {
            if (size[pu] > size[pv]) {
                parent[pv] = pu;
                size[pv] += size[pu];
            } else if (size[pu] == size[pv]) {
                parent[pv] = pu;
                size[pv] += size[pu];
            } else if (size[pu] < size[pv]) {
                parent[pu] = pv;
                size[pv] += size[pu];
            }
        }
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<int> size(n + 1, 1);
        vector<int> parent(n + 1, 1);
        for (int i = 0; i < n + 1; i++) {
            parent[i] = i;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i != j && isConnected[i][j] == 1) {
                    int pu = find_parent(i+1, parent);
                    int pv = find_parent(j+1, parent);
                    if (pu != pv) {
                        union_by_size(i+1, j+1, parent, size);
                    }
                }
            }
        }
        // d(parent);
        for(int i=1;i<=n;i++){
            if(i==parent[i])ans++;
        }
        return ans;

    }
};

//   1 2 3
// 1 1 1 0
// 2 1 1 0
// 3 0 0 1
