https://www.geeksforgeeks.org/problems/minimum-spanning-tree/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=minimum-spanning-tree



class Solution {
  public:
    int find_parent(int node,vector<int>&parent){
        if(node==parent[node])return node;
        return parent[node]=find_parent(parent[node],parent);
    }
    void union_by_size(int u,int v,vector<int>&parent,vector<int>&size){
        int pu=find_parent(u,parent);
        int pv=find_parent(v,parent);
        if(pu!=pv){
            if(size[pu]>size[pv]){
                parent[pv]=pu;
                size[pv]+=size[pu];
            }
            else if(size[pu]==size[pv]){
                parent[pv]=pu;
                size[pv]+=size[pu];
            }
            else if(size[pu]<size[pv]){
                parent[pu]=pv;
                size[pv]+=size[pu];
            }
        }
    }
  
    int spanningTree(int V, vector<vector<int>> adj[]) {
        vector<pair<int,pair<int,int>>>v,mst;
        for(int i=0;i<V;i++){
            for(int j=0;j<adj[i].size();j++){
                vector<int>temp=adj[i][j];
                int node=i;
                int adj_node=temp[0];
                int edge_wt=temp[1];
                v.push_back({edge_wt,{node,adj_node}});
            }
        }
        sort(v.begin(),v.end());
        vector<int>size(V,1);
        vector<int>parent(V,1);
        for(int i=0;i<V;i++){
            parent[i]=i;
        }
        int ans=0;
        
        for(int i=0;i<v.size();i++){
            int edge_wt=v[i].first;
            int node=v[i].second.first;
            int adj_node=v[i].second.second;
            
            int pu=find_parent(node,parent);
            int pv=find_parent(adj_node,parent);
            if(pu!=pv){
                union_by_size(node,adj_node,parent,size);
                ans+=edge_wt;
                mst.push_back({edge_wt,{node,adj_node}});
            }
        }
        d(mst);
        return ans;
        
    }
};
