https://www.geeksforgeeks.org/problems/number-of-distinct-islands/0


class Solution {
  public:
    int n, m;
    bool check(int row, int col) {
        if (row < 0 || row >= n || col < 0 || col >= m)
            return 0;
        return 1;
    }
    void dfs(int row, int col,int srow,int scol, vector<vector<int>>& vis,vector<vector<int>>& grid,vector<pair<int,int>>&temp) {
        vis[row][col] = 1;
        int dr[4] = {-1, 0, 1, 0};
        int dc[4] = {0, 1, 0, -1};
        temp.push_back({row-srow,col-scol});
        for (int j = 0; j < 4; j++) {
            int nr = row + dr[j];
            int nc = col + dc[j];
            if (check(nr, nc) && vis[nr][nc] == 0 && grid[nr][nc] == 1) {
                vis[nr][nc] = 1;
                dfs(nr, nc,srow,scol, vis, grid,temp);
            }
        }
    }
    
    void bfs(int row, int col,int srow,int scol, vector<vector<int>>& vis,vector<vector<int>>& grid,vector<pair<int,int>>&temp) {
        vis[row][col] = 1;
        int dr[4] = {-1, 0, 1, 0};
        int dc[4] = {0, 1, 0, -1};
        queue<pair<int,int>>q;
        q.push({row,col});
        while(q.size()){
            int size=q.size();
            for(int i=0;i<size;i++){
                //  auto [r,c]=q.front(); not working in chutia gfg
                 pair<int, int> front = q.front();
                 int r = front.first;            
                 int c = front.second;   
                temp.push_back({r-srow,c-scol});
                q.pop();
                for (int j = 0; j < 4; j++) {
                int nr = r + dr[j];
                int nc = c + dc[j];
                if (check(nr, nc) && vis[nr][nc] == 0 && grid[nr][nc] == 1) {
                vis[nr][nc] = 1;
                q.push({nr,nc});
                }
                }
            }
        }
        
    }

    int countDistinctIslands(vector<vector<int>>& grid) {
         n = grid.size();
        m = grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));
        set<vector<pair<int,int>>>st;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                    vector<pair<int,int>>temp;
                    if (grid[i][j] == 1 && vis[i][j] == 0) {
                        // dfs(i, j,i,j, vis, grid,temp);
                        bfs(i, j,i,j, vis, grid,temp);
                        st.insert(temp);
                    }
            }
        }
        return st.size();
    }
};


