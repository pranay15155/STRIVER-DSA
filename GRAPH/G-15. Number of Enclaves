https://leetcode.com/problems/number-of-enclaves/description/

//BFS

class Solution {
public:
int n, m;
    bool check(int row, int col) {
        if (row < 0 || row >= n || col < 0 || col >= m)
            return 0;
        return 1;
    }
    void bfs(int row,int col, vector<vector<int>>&vis,vector<vector<int>>& grid){
        queue<pair<int,int>>q;
        vis[row][col]=1;
        q.push({row,col});
        int dr[4] = {-1, 0, 1, 0};
        int dc[4] = {0, 1, 0, -1};
        grid[row][col]=0;
        while(q.size()){
            int size=q.size();
            for(int i=0;i<size;i++){
                auto [x,y]=q.front();
                q.pop();
                for (int j = 0; j < 4; j++) {
                    int nr = x + dr[j];
                    int nc = y + dc[j];
                    if(check(nr,nc) && vis[nr][nc]==0 && grid[nr][nc]==1){
                        vis[nr][nc]=1;
                        q.push({nr,nc});
                        grid[nr][nc]=0;
                    }
                }
            }
        }

    }
    int numEnclaves(vector<vector<int>>& grid) {
        n=grid.size();
        m=grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i==0 || i==n-1 || j==0 ||j==m-1){
                    if(grid[i][j]==1 && vis[i][j]==0){
                        bfs(i,j,vis,grid);
                    }
                }
            }
        }
        int ans=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    ans++;
                }
            }
        }
        return ans;
    }
};




//DFS

class Solution {
public:
    int n, m;
    bool check(int row, int col) {
        if (row < 0 || row >= n || col < 0 || col >= m)
            return 0;
        return 1;
    }
    void dfs(int row, int col, vector<vector<int>>& vis,vector<vector<int>>& grid) {
        vis[row][col] = 1;
        int dr[4] = {-1, 0, 1, 0};
        int dc[4] = {0, 1, 0, -1};
        grid[row][col] = 0;

        for (int j = 0; j < 4; j++) {
            int nr = row + dr[j];
            int nc = col + dc[j];
            if (check(nr, nc) && vis[nr][nc] == 0 && grid[nr][nc] == 1) {
                vis[nr][nc] = 1;
                grid[nr][nc] = 0;
                dfs(nr, nc, vis, grid);
            }
        }
    }
    int numEnclaves(vector<vector<int>>& grid) {
        n = grid.size();
        m = grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (i == 0 || i == n - 1 || j == 0 || j == m - 1) {
                    if (grid[i][j] == 1 && vis[i][j] == 0) {
                        dfs(i, j, vis, grid);
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1) {
                    ans++;
                }
            }
        }
        return ans;
    }
};
