
class Solution {
public:
    vector<string> f(string s,unordered_map<string,int>&mp){
        vector<string>ans;
        for(int i=0;i<s.size();i++){
            for(int j=0;j<26;j++){
                string new_temp=s;
                char x=char('a'+j);
                new_temp[i]=x;
                if(new_temp!=s && mp.find(new_temp)!=mp.end()){
                    ans.push_back(new_temp);
                }
            }
        }
        return ans;
    }
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_map<string,int>mp;
        for(int i=0;i<wordList.size();i++){
            mp[wordList[i]]++;
        }
        unordered_map<string,int>vis;
        if(beginWord==endWord)return 1;
        queue<pair<string,int>>q;
        q.push({beginWord,1});
        vis[beginWord]++;
        int ans=0;
        while(q.size()){
            int size=q.size();
            for(int i=0;i<size;i++){
                auto x=q.front();
                q.pop();
                vector<string>temp=f(x.first,mp);
                d(temp);
                for(auto &z:temp){
                    if(z==endWord){
                        ans=x.second+1;
                        return ans;
                    }
                    if(vis.find(z)==vis.end()){
                        q.push({z,x.second+1});
                        vis[z]++;
                    }
                }
            }
        }
        return ans;

    }
};
