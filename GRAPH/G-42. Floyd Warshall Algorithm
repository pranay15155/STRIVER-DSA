https://www.geeksforgeeks.org/problems/implementing-floyd-warshall2042/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=implementing-floyd-warshall



class Solution {
  public:
    void shortestDistance(vector<vector<int>>& mat) {
        int n=mat.size();
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(mat[i][j]==-1)mat[i][j]=1e8;
            }
        }
        //k-intermediate
        //i-source
        //j-destination
        for(int k=0;k<n;k++){
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    if(mat[k][j]!=1e8 && mat[i][k]!=1e8 && mat[i][j]>(mat[i][k]*1ll)+mat[k][j]){
                        mat[i][j]=mat[i][k]+mat[k][j];
                    }
                }
            }
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(mat[i][j]==1e8)mat[i][j]=-1;
            }
        }
    }
};



//WRONG APPROACH 

// User function template for C++

class Solution {
  public:
    void shortestDistance(vector<vector<int>>& mat) {
        int n=mat.size();
        int m=mat[0].size();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]==-1)mat[i][j]=1e8;
            }
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                for(int k=0;k<n;k++){
                    if(mat[i][j]!=1e8 && mat[i][k]!=1e8 && mat[i][j]>mat[i][k]+mat[k][j]){
                        mat[i][j]=mat[i][k]+mat[k][j];
                    }
                }
            }
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]==1e8)mat[i][j]=-1;
            }
        }
    }
};
