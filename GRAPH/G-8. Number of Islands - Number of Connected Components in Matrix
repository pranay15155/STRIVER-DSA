//   https://leetcode.com/problems/number-of-islands/description/

//BFS

class Solution {
public:
    int n,m;
    bool check(int row,int col){
        if(row>=n || row<0 || col>=m || col<0)return 0;
        return 1;
    }
    void bfs(int row,int col,vector<vector<char>>& grid,vector<vector<int>>& vis){
        queue<pair<int,int>>q;
        q.push({row,col});
        vis[row][col]=1;
        int dr[4]={-1,0,1,0};
        int dc[4]={0,1,0,-1};
        while(q.size()){
            int size=q.size();
            for(int i=0;i<size;i++){
                auto [r,c]=q.front();
                q.pop();
                for(int j=0;j<4;j++){
                int nr=r+dr[j];
                int nc=c+dc[j];
                if(check(nr,nc) && vis[nr][nc]==0 && grid[nr][nc]=='1'){
                    q.push({nr,nc});
                    vis[nr][nc]=1;
                }
                }
            }
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        n=grid.size();
        m=grid[0].size();
        int ans=0;
        vector<vector<int>>vis(n,vector<int>(m,0));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(vis[i][j]==0 && grid[i][j]=='1'){
                    bfs(i,j,grid,vis);
                    ans++;
                }
            }
        }
        return ans;
    }
};

//DFS

class Solution {
public:
    int n, m;
    bool check(int row, int col) {
        if (row >= n || row < 0 || col >= m || col < 0)
            return 0;
        return 1;
    }
    void dfs(int row, int col, vector<vector<char>>& grid,vector<vector<int>>& vis) {
        vis[row][col] = 1;
        int dr[4] = {-1, 0, 1, 0};
        int dc[4] = {0, 1, 0, -1};

        for (int j = 0; j < 4; j++) {
            int nr = row + dr[j];
            int nc = col + dc[j];
            if (check(nr, nc) && vis[nr][nc] == 0 && grid[nr][nc] == '1') {
                dfs(nr,nc,grid,vis);
                vis[nr][nc] = 1;
            }
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        n = grid.size();
        m = grid[0].size();
        int ans = 0;
        vector<vector<int>> vis(n, vector<int>(m, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (vis[i][j] == 0 && grid[i][j] == '1') {
                    dfs(i, j, grid, vis);
                    ans++;
                }
            }
        }
        return ans;
    }
};
