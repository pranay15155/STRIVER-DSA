https://leetcode.com/problems/01-matrix/submissions/

class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& grid) {
        queue<pair<int,int>>q;
        int level=1;
        int n=grid.size(),m=grid[0].size();
        vector<vector<int>>vis(n,vector<int>(m,0));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==0){
                    vis[i][j]=1;
                    q.push({i,j});
                }
            }
        }
        while(q.size()){
            int size=q.size();
            for(int i=0;i<size;i++){
                int row=q.front().first;
                int col=q.front().second;
                q.pop();
                int nrow[4]={-1,0,1,0};
                int ncol[4]={0,1,0,-1};
                for(int j=0;j<4;j++){
                    int new_row=row+nrow[j];
                    int new_col=col+ncol[j];
                    if(new_row<0 || new_col<0 ||new_row>=n || new_col>=m)continue;
                    if(grid[new_row][new_col]==0 || vis[new_row][new_col]==1)continue;
                    if(grid[new_row][new_col]==1 && vis[new_row][new_col]==0){
                         vis[new_row][new_col]=1;
                         grid[new_row][new_col]=level;
                         q.push({new_row,new_col});
                    }
                }
            }
            level++;
        }
        return grid;

    }
};

//METHOD-2
MORE INTUITIVE 
STORING DISTANCE IN PAIR OR PAIR IN QUEUE

class Solution {
public:
    int n, m;
    bool check(int row, int col) {
        if (row < 0 || row >= n || col < 0 || col >= m)
            return 0;
        return 1;
    }
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        n = mat.size();
        m = mat[0].size();
        queue<pair<pair<int, int>, int>> q;
        vector<vector<int>> dist(n, vector<int>(m, 1e8));
        vector<vector<int>> vis(n, vector<int>(m, 0));

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (mat[i][j] == 0) {
                    dist[i][j] = 0;
                    q.push({{i, j}, 0});
                    vis[i][j] = 1;
                }
            }
        }
        int dr[4] = {-1, 0, 1, 0};
        int dc[4] = {0, 1, 0, -1};
        while (q.size()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                auto front = q.front();
                q.pop();
                auto [inner, z] = front;
                auto [x, y] = inner;
                for (int j = 0; j < 4; j++) {
                    int nr = x + dr[j];
                    int nc = y + dc[j];
                    if(check(nr,nc)){
                        if(vis[nr][nc]==0 && mat[nr][nc]==1){
                            vis[nr][nc]=1;
                            q.push({{nr,nc},z+1});
                            dist[nr][nc]=z+1;
                        }
                        else if(vis[nr][nc]==1 && dist[nr][nc]>z+1){
                            q.push({{nr,nc},z+1});
                            dist[nr][nc]=z+1;
                        }
                    }
                }
            }
        }
        return dist;
    }
};


//STRIVER CODE

IN STRIVER QUESTION DISTANCE WAS TO BE CALCULATED FROM 1 INSTEAD OF 0
class Solution 
{
    public:
    //Function to find the distance of nearest 1 in the grid for each cell.
	vector<vector<int>>nearest(vector<vector<int>>grid)
	{
	    int n = grid.size(); 
	    int m = grid[0].size(); 
	    // visited and distance matrix
	    vector<vector<int>> vis(n, vector<int>(m, 0)); 
	    vector<vector<int>> dist(n, vector<int>(m, 0)); 
	    // <coordinates, steps>
	    queue<pair<pair<int,int>, int>> q; 
	    // traverse the matrix
	    for(int i = 0;i<n;i++) {
	        for(int j = 0;j<m;j++) {
	            // start BFS if cell contains 1
	            if(grid[i][j] == 1) {
	                q.push({{i,j}, 0}); 
	                vis[i][j] = 1; 
	            }
	            else {
	                // mark unvisited 
	                vis[i][j] = 0; 
	            }
	        }
	    }
	    
	    int delrow[] = {-1, 0, +1, 0}; 
	    int delcol[] = {0, +1, 0, -1}; 
	    
	    // traverse till queue becomes empty
	    while(!q.empty()) {
	        int row = q.front().first.first; 
	        int col = q.front().first.second; 
	        int steps = q.front().second; 
	        q.pop(); 
	        dist[row][col] = steps; 
	        // for all 4 neighbours
	        for(int i = 0;i<4;i++) {
	            int nrow = row + delrow[i]; 
	            int ncol = col + delcol[i]; 
	            // check for valid unvisited cell
	            if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m 
	            && vis[nrow][ncol] == 0) {
	                vis[nrow][ncol] = 1; 
	                q.push({{nrow, ncol}, steps+1});  
	            }
	        }
	    }
	    // return distance matrix
	    return dist; 
	}
};
