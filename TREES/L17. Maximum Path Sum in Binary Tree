VERY IMPORTANT QUESTION 

https://leetcode.com/problems/binary-tree-maximum-path-sum/description/



class Solution {
public:
    int f(TreeNode* root, int& ans) {
        if (!root)return 0;
        int l = f(root->left, ans);
        int r = f(root->right, ans);
        ans = max({ans, root->val + l + r, root->val, root->val + l, root->val + r});
        return max({root->val, root->val + l, root->val + r});
    }
    int maxPathSum(TreeNode* root) {
        int ans = INT_MIN;
        f(root, ans);
        return ans;
    }
};




//METHOD --2

class Solution {
public:
    int f(TreeNode* root,int &ans){
        if(!root)return 0;
        int res=root->val;
        int l=f(root->left,ans);
        int r=f(root->right,ans);
        if(l>0)res+=l;
        if(r>0)res+=r;
        ans=max(ans,res);
        return max({root->val,root->val+l,root->val+r});
    }
    int maxPathSum(TreeNode* root) {
        int ans=INT_MIN;
        f(root,ans);
        return ans;
    }
};

//METHOD --3

class Solution {
public:
    int f(TreeNode* root, int& ans) {
        if (!root)return 0;
        int l = max(0,f(root->left, ans));
        int r = max(0,f(root->right, ans));
        ans = max({ans, root->val + l + r});
        return max(l,r)+root->val;
    }
    int maxPathSum(TreeNode* root) {
        int ans = INT_MIN;
        f(root, ans);
        return ans;
    }
};
